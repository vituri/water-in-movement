[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Water in movement",
    "section": "",
    "text": "Preface\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis eget mollis ipsum. Nulla vel justo vulputate, pharetra justo interdum, porttitor lacus. Nunc feugiat convallis fermentum. Maecenas in diam sed orci vehicula bibendum. Nullam nec ante non urna elementum cursus at ut augue. Proin pharetra lacus pellentesque, sodales nibh in, tempor nulla. Nullam vel laoreet lacus. In scelerisque facilisis orci eu venenatis. Sed mi libero, vestibulum nec nibh at, blandit imperdiet ex. Quisque finibus lectus ipsum. Praesent sed nibh turpis. Nunc in nisl lacinia, imperdiet elit nec, viverra augue. Integer molestie orci in metus ultricies, sed aliquet leo facilisis. Vivamus sagittis nulla sit amet justo pretium, sit amet ultrices nunc molestie. Aliquam cursus, quam ut finibus faucibus, mauris ante placerat elit, vel fringilla felis purus congue risus.\nPraesent sed dui sed felis hendrerit vehicula eget nec odio. Aenean nec varius nibh. Nullam semper, est ac iaculis accumsan, sem lorem convallis lacus, eu maximus sapien ligula non massa. Nam iaculis consectetur condimentum. Fusce ut viverra lacus. Etiam vulputate quam venenatis diam egestas blandit. Fusce tempus ante risus, ac feugiat urna aliquet vel. Suspendisse porta semper diam, finibus hendrerit diam vestibulum id. Pellentesque consequat mauris vitae justo varius vulputate. Pellentesque cursus dictum nunc. Nunc vehicula massa vitae enim tempor rutrum. Ut elementum, massa vitae pretium tempor, lectus metus varius ligula, quis lobortis nibh ipsum vehicula neque.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Duis eget mollis ipsum. Nulla vel justo vulputate, pharetra justo interdum, porttitor lacus. Nunc feugiat convallis fermentum. Maecenas in diam sed orci vehicula bibendum. Nullam nec ante non urna elementum cursus at ut augue. Proin pharetra lacus pellentesque, sodales nibh in, tempor nulla. Nullam vel laoreet lacus. In scelerisque facilisis orci eu venenatis. Sed mi libero, vestibulum nec nibh at, blandit imperdiet ex. Quisque finibus lectus ipsum. Praesent sed nibh turpis. Nunc in nisl lacinia, imperdiet elit nec, viverra augue. Integer molestie orci in metus ultricies, sed aliquet leo facilisis. Vivamus sagittis nulla sit amet justo pretium, sit amet ultrices nunc molestie. Aliquam cursus, quam ut finibus faucibus, mauris ante placerat elit, vel fringilla felis purus congue risus.\nPraesent sed dui sed felis hendrerit vehicula eget nec odio. Aenean nec varius nibh. Nullam semper, est ac iaculis accumsan, sem lorem convallis lacus, eu maximus sapien ligula non massa. Nam iaculis consectetur condimentum. Fusce ut viverra lacus. Etiam vulputate quam venenatis diam egestas blandit. Fusce tempus ante risus, ac feugiat urna aliquet vel. Suspendisse porta semper diam, finibus hendrerit diam vestibulum id. Pellentesque consequat mauris vitae justo varius vulputate. Pellentesque cursus dictum nunc. Nunc vehicula massa vitae enim tempor rutrum. Ut elementum, massa vitae pretium tempor, lectus metus varius ligula, quis lobortis nibh ipsum vehicula neque.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "potential-recharge.html",
    "href": "potential-recharge.html",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "",
    "text": "2.1 Abstract",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#introduction",
    "href": "potential-recharge.html#introduction",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.2 Introduction",
    "text": "2.2 Introduction\nWater is fundamental to Earth’s systems, influencing climate, ecosystems, and human activities. The hydrological cycle describes the continuous movement of water through various reservoirs, including the atmosphere, soil, surface water, glaciers, and groundwater. Understanding this cycle is crucial for effective water resource management, particularly in the face of changing climatic conditions and increasing human demands. By quantifying water fluxes within different reservoirs, scientists can assess water availability, identify trends, and develop strategies for sustainable management (Santarosa et al., 2021).\nAnalyzing the movement of water through these reservoirs is made possible by understanding the mass balance equation for any system at various scales. The mass balance is derived from Reynolds’ transport theorem (Magulis, 2017). The first step in mass balance analysis is defining a control volume or area, followed by identifying the inflows and outflows (Hessels et al., 2022). Hydrological balance equations are essential tools for quantifying water exchanges in each system. These equations provide insights into the relationships between precipitation, evapotranspiration, runoff, and storage changes (Wang et al., 2014).  Such variations highlight the need for flexible approaches in hydrological modeling to account for different climatic and geological settings (Lehmann et al., 2022). Data limitations, climatic characteristics, or the temporal scale of the analysis may lead to adaptations of the hydrological balance equation. A simplified form of the water balance equation for a watershed can be expressed as:\n\\[\n\\Delta S = P - ET - Q\n\\tag{2.1}\\]\nwhere, \\(\\Delta S\\) is the change in water storage, P is precipitation, ET is evapotranspiration and Q is surface runoff (Wang et al., 2014; Lehmann at al., 2022). In some cases, where horizontal movement (surface or subsurface runoff) of water is minimal, Q can be omitted (Wang et al., 2014). This type of adjustment in the hydrological balance equation can also be made for other variables to evaluate potential variability or hidden trends in one or more datasets (Luo et al., 2021; Lehmann et al., 2022). Another example of adapting the hydrological balance equation is to estimate groundwater recharge (Baalousha et al., 2018), at multi-annual scales, \\(\\Delta S\\)  can be disregarded (Crosbie et al., 2015).\n\\[\nR = P - ET - Q - \\Delta S\n\\]\nHydrological balances support decision-making and directing water volumes toward necessary uses. The need for new tools to quantify water is increasingly evident, especially in the current context, where water management requires understanding the effects of extreme events caused by climate change and the transformations in hydrological processes driven by anthropogenic activities (Scanlon et al., 2023).\nObtaining high-quality spatiotemporal estimates of hydrological balance components is a challenge due to the lack of in situ measurements and the absence of policies maintaining adequate monitoring networks. In this context, the era of satellite remote sensing offers a promising solution for monitoring the hydrosphere. Due to dedicated satellite missions, it is possible to measure key variables that can be used to estimate the components of the hydrological balance (Lehmann et al., 2022). Advancements in remote sensing, hydrological modeling, and data assimilation techniques have improved the ability to estimate water balance components across various spatial and temporal scales (Hessels et al., 2022). However, uncertainties remain due to limitations in data availability, measurement techniques, and model assumptions (Crosbie et al., 2015).\nAs an example of hydrological applications based on remote sensing, Lehmann et al. (2022) conducted a global study evaluating the state-of-the-art methods and recent satellite data applied to hydrology, investigating the water balance in the world’s major basins. The authors found good performance of satellite data for estimating changes in water storage. However, they also noted that some satellite products show variations in performance depending on the region, highlighting the importance of carefully evaluating the data used in local studies.\nWang et al. (2014) evaluate the limitations and strengths of satellite data for hydrological balance at the semi-arid basin level across Australia. The authors conclude that the exclusive use of remote sensing data is sufficient to close the hydrological balance in large regions. Luo et al. (2021) analyze different combinations of satellite data to identify those with the lowest errors in estimating the hydrological balance in a basin in China. They highlight the most accurate data as the long-term global precipitation obtained through the combination of microwave and infrared satellite measurements from GPM IMERG (Integrated Multi-satellite Retrievals for Global Precipitation Measurement) (Huffman et al., 2019). Additionally, they mention evapotranspiration, water storage, surface runoff, and other data from large-scale terrestrial hydrological models generated by GLDAS (Global Land Data Assimilation System) (Rui & Beaudoing, 2015; Beaudoing & Rodell, 2016). This system integrates evapotranspiration data through an energy balance scheme (using methods such as Penman-Monteith) based on MODIS (Moderate Resolution Imaging Spectroradiometer) data (Running et al., 2019). Recently, measurements from GRACE (Gravity Recovery and Climate Experiment) have also been incorporated, allowing for the estimation of total water volume (Total Water Storage) (Li et al., 2019).\nGiven the critical role of groundwater in sustaining water resources, particularly in regions experiencing water scarcity, estimating groundwater recharge is a key aspect of hydrological studies. Recharge estimation methods, such as water balance equations, isotope analysis, and numerical modeling, provide valuable insights into groundwater sustainability (Santarosa et al., 2024). By refining these methods and incorporating advanced data sources, researchers and policymakers can improve water resource planning and develop strategies to mitigate the impacts of climate variability and human activities on aquifers.\nThe primary aim of this chapter is to demonstrate a recharge estimation based on the water budget method, utilizing an adaptation of Equation 2 for a multiannual scale, as proposed by Santarosa et al. (2024, 2021). The use of remote sensing, implemented in R language, was crucial for various processing steps involving a large dataset, aimed at analyzing the spatial and temporal behavior of aquifer potential recharge.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#dataset",
    "href": "potential-recharge.html#dataset",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.3 Dataset",
    "text": "2.3 Dataset\nThe studies by Santarosa et al. (2024; 2021) utilize a consistent data processing methodology but differ in their hydrological and landscape datasets (Table 1). The 2021 study employed precipitation data from the Tropical Rainfall Measuring Mission (TRMM) and the Global Land Data Assimilation System (GLDAS v2.1), both with a daily temporal resolution. The spatial resolution was approximately 25 km for precipitation and evapotranspiration, complemented by 30 m land cover data and soil texture characteristics.\nIn contrast, the 2024 study refined the methodology by integrating precipitation data from the Integrated Multi-satellite Retrievals for Global Precipitation Measurement (IMERG GPM v6) at a ~10 km resolution, updated evapotranspiration data from GLDAS v2.2, annual land cover maps from MapBiomas (30 m, https://brasil.mapbiomas.org/), and soil texture information sourced from SoilGrids (250 m, https://soilgrids.org/).\nThe datasets from NASA (National Aeronautics and Space Administration) were downloaded from GESDISC (https://disc.gsfc.nasa.gov/). Detailed instructions for downloading these datasets can be found in the dataset download information. Additionally, Google Collaboratory can be used to download the dataset links (https://github.com/lvsantarosa/NASA-data-download), and it also supports accessing all mentioned datasets via the Google Earth Engine API.\nTable 1. Datasets from Santarosa et al. (2021) and Santarosa et al. (2024)\n\n\n\n\n\n\n\n\nCharacteristic\nSantarosa et al. (2021)\nSantarosa et al. (2024)\n\n\nObjective\nWater budget with precipitation, evapotranspiration, and runoff\nEnhanced model with more recent data and improved scalability\n\n\nPrecipitation Data\nTRMM 3B42 v7\nGPM IMERG v6\n\n\nEvapotranspiration\nGLDAS v2.1\nGLDAS v2.2\n\n\nSurface Runoff\nSCS-CN with fixed local land use and soil data\nSCS-CN with annual data from MapBiomas Brazil and global soil data (SoilGrids)\n\n\nValidation",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#methodology",
    "href": "potential-recharge.html#methodology",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.4 Methodology",
    "text": "2.4 Methodology\nThe Soil Conservation Service (SCS) method is employed to convert rainfall into surface runoff by accounting for the characteristics of land cover and soil texture.\n\n2.4.1 Determination of the Curve Number (CN)\nThe CN is derived by integrating soil hydrological characteristics with land use information. In the studies, high-resolution land cover data (e.g., MapBiomas with a 30 m resolution) and soil texture data (e.g., SoilGrids with a 250 m resolution) are combined to assign appropriate CN values for different areas.\n\n\n2.4.2 Calculation of Maximum Potential Retention (S)\nOnce the CN is established, the potential maximum retention is calculated using the formula:\n\\[\nS = \\frac{{25400}}{{CN}}-254\n\\]\nThis equation converts the CN into a measure of the maximum amount of rainfall that can be retained by the soil.\n\n\n2.4.3 Estimation of Initial Abstraction (Ia)\nThe initial abstraction, which includes losses from interception, early infiltration, and surface depression storage, is typically assumed to be 20% of S:\n\\[\nI_{a} = 0.2 S\n\\]\n\n\n2.4.4 Runoff Calculation\nFor rainfall events where the daily precipitation P exceeds \\(I_{a}\\), the runoff is computed with the equation:\n\\[\nR_{off} = \\frac{(P-0.2S)^2}{P+0.8S}\n\\]\nThis empirical formula estimates the portion of rainfall that becomes surface runoff after the initial abstraction is met.\nBy processing daily rainfall data through these steps, the SCS method generates spatially distributed runoff estimates that are integrated into the overall water balance analysis. This approach is particularly valuable when used in combination with remote sensing data, enabling researchers to capture the spatial variability of runoff across large areas and different land uses.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#processing",
    "href": "potential-recharge.html#processing",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.5 Processing",
    "text": "2.5 Processing\nThe first step is to load the essential packages: tidyverse, terra, and glue.\n\ntidyverse: This package activates a suite of tools for data processing, such as date manipulation, filtering, editing, and selecting information.\nterra: This package handles the geoprocessing of spatial data.\nglue: This package is an alternative method for concatenating names in files.\n\n\nlibrary(tidyverse) \nlibrary(glue) \nlibrary(terra)\n\nThe next step is to specify the working directory (setwd) and create a temporary directory (dir.create) to store processing information, which will be excluded in the final output. This practice helps to ensure that background processing does not consume a lot of space on the hard disk. It is strongly recommended for large spatial and temporal processing tasks.\n\nmy_path = \\(x) glue::glue('data/potential-recharge/', x)\ndir.create(path = my_path('temp'), showWarnings = FALSE) \nterraOptions(tempdir = my_path('temp'))\n\n\n2.5.1 Curve Number Calculation\nApplying the presented methodology, it is necessary to combine the Hydrologic Soil Group (HSG) information with Land Use Land Cover (LULC) data to determine the curve number (CN). As of the time of writing this chapter, new approaches are available and can be tested, including the possibility of using soil hydrological information for global purposes. For more information, visit hihydro soil.\nIn the original calculation presented by Santarosa et al. (2024), the textural information from SoilGrids was downloaded and processed to obtain the HSG information for the study area. The following steps will present the conceptualization of this process.\nTo download the SoilGrids information, see the accompanying Google Earth Engine script.\nThis process involves loading the information from SoilGrids and projecting it to the standard projection used.\n\nsoil = terra::rast(my_path('01_DADOS/00_SOIL/SOIL.tif'))\n\nnames(soil) = c('clay', 'sand', 'silt') \nsoil &lt;- soil |&gt; project('EPSG:4326', method = \"mode\")\nplot(soil)\n\n\n\n\n\n\n\n\nFor verification of data, the sum of soil layers should to be equal to 1 for each pixel.\n\nsum(soil) |&gt; plot()\n\n\n\n\n\n\n\n\n\n\n\nRepresentations of actual and estimated points on the zones of the hydrologic soil group and the triangle of soil from Sayl et al. (2017)\n\n\n\n# Hydrologic Soil Group and Label used in the reclassification\n# Hydrologic Soil Group \n#  A  =   1 \n#  B  =   2 \n#  C  =   3 \n#  D  =   4 \n\ncalculate_textural_triangle = function(clay, sand, silt) {\n  case_when(\n\n    clay &lt;= 0.05 & sand &lt;= 0.05 & silt &lt;= 0.05 ~ 0\n    ,clay &gt;= 0.35 ~ 4\n    ,clay &gt;= 0.25 & sand &lt;= 0.45 ~ 4\n    ,clay &gt;= 0.2 & silt &lt;= 0.275 ~ 3\n    ,silt &lt;= 0.5 ~ 2\n    ,clay &lt;= 0.075 ~ 1\n    ,sand &lt;= 0.575 ~ 2\n    ,TRUE ~ 1\n  )\n}\n\nsoil_classified = terra::app(soil, fun = function(x) calculate_textural_triangle(clay = x[, 1], sand = x[,2], silt = x[,3]))\nsoil_classified |&gt; plot()\n\n\n\n\n\n\n\n\n\n\n2.5.2 Land Use and Land Cover (LULC)\nAnnual land cover data from MapBiomas, with a spatial resolution of 30 meters (Souza et al. 2020), were incorporated to capture the dynamic temporal behavior in runoff estimation. This LULC data can be utilized for annual analysis and is available for multiple countries across South America where MapBiomas information is accessible.\nMapBiomas LULC for Brazil\n\nlist &lt;- list.files(my_path('01_DADOS/01_LULC/'), full.names = TRUE, pattern = '.tif$')\n\nuses &lt;- list()\nfor(i in 1:length(list)) {\n  uses[[i]] &lt;- terra::rast(list[i]) |&gt; \n               terra::resample(soil_classified, method = 'mode') |&gt; \n               terra::as.int()\n  print(uses[[i]])\n}\n\nclass       : SpatRaster \ndimensions  : 668, 628, 1  (nrow, ncol, nlyr)\nresolution  : 0.0025, 0.0025  (x, y)\nextent      : -49.86, -48.29, -22.49, -20.82  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource(s)   : memory\nname        : brasil_coverage_2023 \nmin value   :                    3 \nmax value   :                   48 \n\nmapbio_resample = terra::rast(uses)\nmapbio_resample[mapbio_resample &lt;= 0] = NA\nterra::plot(mapbio_resample[[1]]) \n\n\n\n\n\n\n\n\n\n\n2.5.3 Reclassification of MAPBIOMAS According to SCS Method\nFor simplify the process, the LULC orinal data was reclassified to the SCS LULC classes the MapBimas values are agruped in 8 classes as presented in the Table 2.\nTable 2. Classes of LULC used in SCS and the correspondent classes from MapBiomas\n\n\n\n\n\n\n\nSCS LULC\nMapBiomas LULC\n\n\nUrban (10)\n24\n\n\nAgriculture (20)\n14, 18, 19, 20, 21, 36, 39, 40, 41, 46, 47, 48, 62\n\n\nForest (30)\n1, 3, 4, 5, 49\n\n\nSilviculture (40)\n9\n\n\nGrassland (50)\n12, 13, 32, 50\n\n\nUncover (60)\n23, 25, 29, 30\n\n\nPasture (70)\n15\n\n\nWater (100)\n10, 27, 31, 33\n\n\n\n\n# Multiple replacements\nclass_map_scs &lt;- rbind(c(24,  10), \n                       c(14,  20), c(18, 20), c(19, 20), c(20, 20), c(21, 20), c(36, 20), c(39, 20), c(40, 20), c(41, 20), c(46, 20), c(47, 20), c(48, 20), c(62, 20), \n                       c(1 ,  30), c(3 , 30), c(4 , 30), c(5 , 30), c(49, 30), \n                       c(9 ,  40), \n                       c(12,  50), c(13, 50), c(32, 50), c(50, 50), \n                       c(23,  60), c(25, 60), c(29, 60), c(30, 60),\n                       c(15,  70),\n                       c(11, 100), c(27, 100), c(31, 100), c(33, 100))\n\nrc_map_scs = classify(mapbio_resample, class_map_scs)\nrc_map_scs[rc_map_scs &lt; 10] = NA\n\nterra::plot(rc_map_scs[[1]])\n\n\n\n\n\n\n\n\n\n\n2.5.4 Curve Number (CN) Classification\nBy reclassifying the HSG and LULC (Land Use and Land Cover) data, the CN map can be produced. Table 3 presents the intersection of HSG and LULC data to derive the CN values used in the SCS method.\nTable 3: Curve Number values based on the combination of LULC and HSG data.\n\n\n\nLand Use / Soil Type\nA\nB\nC\nD\n\n\n\n\nUrban\n89\n92\n94\n95\n\n\nCrops\n64\n75\n82\n85\n\n\nForest\n30\n55\n70\n77\n\n\nSilviculture\n45\n66\n77\n86\n\n\nHerbaceous\n48\n62\n71\n85\n\n\nBare Soil\n77\n86\n91\n94\n\n\nPasture\n39\n61\n74\n80\n\n\nNo Data\n0\n0\n0\n0\n\n\n\n\nclass_cn &lt;- rbind(c(11,89), c(12,92), c(13,94), c(14,95), \n                  c(21,64), c(22,75), c(23,82), c(24,85), \n                  c(31,30), c(32,55), c(33,70), c(34,77), \n                  c(41,45), c(42,66), c(43,77), c(44,86), \n                  c(51,48), c(52,62), c(53,71), c(54,85),\n                  c(61,77), c(62,86), c(63,91), c(64,94), \n                  c(71,39), c(72,61), c(73,74), c(74,80), \n                  c(101,0), c(102,0), c(103,0), c(104,0), \n                  c(10,0 ), c(20,0 ), c(30,0 ), c(40,0 ), \n                  c(50,0 ), c(60,0 ), c(70,0 ), c(100,0))\n\n# Reclassify\nsum_soil_uses = soil_classified  + rc_map_scs\nplot(sum_soil_uses)\n\n\n\n\n\n\n\ncn_final = classify(sum_soil_uses, class_cn)\n\n# Nomes = seq(from = 2000, to = 2021) \n# Use year as names for each CN in case of more than one year of analysis\nNomes = 2023 \nnames(cn_final) = Nomes\n\ncn_final[cn_final &lt; 30] = NA\nterra::plot(cn_final[[1]])\n\n\n\n\n\n\n\n# Export Results\nfilename = my_path(\"02_RESULTADOS/CN_{Nomes}.tif\")\ncn_final |&gt; writeRaster(filename = filename, overwrite = TRUE)\n\n\n\n2.5.5 Process the hydrological data\n\nmask = terra::rast(my_path('02_RESULTADOS/CN_2023.tif')) |&gt; terra::resample(soil) |&gt; terra::trim()\n\n\n# Change the time according with the period\nst &lt;- as.Date('2023/01/01')\nen &lt;- as.Date('2023/12/31')\nDate &lt;- seq(from = st, to = en, by= 'day')\nDate2 &lt;- seq(from = st, to = en, by= 'month')\n\nYear &lt;- seq(from = 2023, to = 2023)\n\n\n\n2.5.6 STEP 1-A Organize the daily data set\n\nrain_day_lst = list.files(path = my_path('01_DADOS/02_PRECIPITATION/'), pattern = '.nc4', full.names = TRUE)\n\nfor(i in 1:length(rain_day_lst)) {\n  rain1 =\n    terra::rast(rain_day_lst[i]) |&gt;\n    terra::project('EPSG:4326') |&gt; \n    terra::t() |&gt;\n    terra::flip(direction = 'horizontal') |&gt;\n    terra::flip(direction = 'vertical') |&gt;\n    terra::resample(mask) |&gt;\n    terra::mask(mask)\n\n  file_rf1 = my_path('temp/Rainfall_GPM_day_ret_{Date[i]}.tif')\n  terra::writeRaster(rain1, filename = file_rf1 , overwrite = TRUE)\n}\n\n\n\n2.5.7 STEP 1-B Convert daily rainfall in monthly\n\nrain_day_lst_res = list.files(path = my_path('temp/'), pattern = 'GPM_day_ret_.*\\\\.tif$', full.names = TRUE)\n\ntable_day_rain &lt;- as_tibble(data.frame(Date, rain_day_lst_res)) |&gt;\n  mutate(Year =  lubridate::year(Date))\n\ntable_date     &lt;- as_tibble(data.frame(Date2))|&gt;\n  mutate(Year =  lubridate::year(Date2))\n\nfor(i in 1:length(Year)) {\n  Y       &lt;- Year[i]\n  sel_rn1 &lt;- table_day_rain |&gt; filter(Year == Y)\n  rain =  terra::rast(sel_rn1$rain_day_lst_res)\n  d &lt;- time(rain)\n  m &lt;- as.numeric(format(d, \"%m\"))\n  y &lt;- as.numeric(format(d, \"%Y\"))\n  ym &lt;- paste0(y, m)\n  rain_m &lt;- tapp(rain, ym, sum)\n  sel_dt &lt;- table_date |&gt; filter(Year == Y)\n  names(rain_m) = sel_dt$Date2\n  file_rf = my_path('temp/Rainfall_GPM_month_{sel_dt$Date2}.tif')\n  terra::writeRaster(rain_m, filename = file_rf , overwrite = TRUE)\n  #print(sel_dt$Date2)\n}\n\n\n\n2.5.8 STEP 2 Resample Curve Number\n\ncn_lst1 = list.files(path = my_path('02_RESULTADOS/'), pattern = 'CN.*\\\\.tif$', full.names = TRUE)\n\ncn1 &lt;- \n  terra::rast(cn_lst1) |&gt; \n  terra::resample(mask) |&gt;\n  terra::mask(mask) |&gt; \n  terra::as.int() |&gt; \n  terra::trim()\n\nfile_cn = my_path('temp/CN_res_{Year}.tif')\nterra::writeRaster(cn1, filename = file_cn , overwrite = TRUE)\n\n\n\n2.5.9 STEP 3 Runoff calculation\n\nrain_day_lst_res = list.files(path = 'temp', pattern = 'GPM_day_ret_.*\\\\.tif$', full.names = TRUE)\n\ncn_lst = list.files(path = my_path('temp'), pattern = 'CN_res.*\\\\.tif$', full.names = TRUE)\n\n## arrumar aqui!!\ntable_day_rain &lt;-\n  tibble(Year = Date[seq_along(rain_day_lst_res)], X = rain_day_lst_res)\n\ntable_merge    &lt;- as_tibble(data.frame(Year, cn_lst)) |&gt; merge(table_day_rain, by = 'Year')\n\n#If you need stat again or use another interval can change this object\n#Year &lt;- seq(from = 2017, to = 2021)\n\nfor(i in 1:length(Date)) {\n  cn_lst    &lt;- table_merge$cn_lst\n  cn        &lt;- terra::rast(cn_lst[i])\n  rain_lst  &lt;- table_merge$rain_day_lst_res\n  rainfall  &lt;- terra::rast(rain_lst[i]) |&gt; terra::resample(cn)\n  s = (25400 / cn) - 254\n  ia = 0.2*s\n  runoff    &lt;- ((rainfall - ia)^2)/(rainfall - ia + s)\n  runoff[ia &gt; rainfall] = 0\n  name_rf   &lt;- Date\n  names(runoff[[1]]) &lt;- name_rf[i]\n  file_rf = glue('temp/Runoff_{name_rf[i]}.tif')\n  terra::writeRaster(runoff[[1]], filename = file_rf , overwrite = TRUE)\n  #print(runoff)\n}\n\n\n#Runoff from day to month\nroff_day_lst_res = list.files(path = 'temp/', pattern = 'Runoff.*\\\\.tif$', full.names = TRUE)\n\nroff =  terra::rast(roff_day_lst_res)\nd &lt;- as.Date(names(roff))\nm &lt;- as.numeric(format(d, \"%m\"))\ny &lt;- as.numeric(format(d, \"%Y\"))\nym &lt;- paste0(y, m)\nroff_m &lt;- tapp(roff, ym, sum)\nnames(roff_m) = Date2\n\nfile_rf = glue('temp/Runoff_month_{Date2}.tif')\nterra::writeRaster(roff_m, filename = file_rf , overwrite = TRUE)\n\ngc()\n\n\n\n2.5.10 STEP 4 Monthly recharge calculation\n\net_m_lst   = list.files(path = '01_DADOS/03_EVAPOTRANSPIRATION/', pattern = '.SUB', full.names = TRUE)\nrain_m_lst = list.files(path = 'temp/', pattern = 'GPM_month.*\\\\.tif$', full.names = TRUE)\nroff_m_lst = list.files(path = 'temp/', pattern = 'Runoff_month_.*\\\\.tif$', full.names = TRUE)\n\nRff &lt;- list()\nEtp &lt;- list()\nPrc &lt;- list()\n\n# Import results and resample all layer\nfor(i in 1:length(Date2)) {\n  Rff[[i]] &lt;- terra::rast(roff_m_lst[i]) |&gt;\n    terra::resample(mask) |&gt; terra::mask(mask)\n  print(names(Rff[[i]]))\n  Etp[[i]] &lt;- terra::rast(et_m_lst[i]) |&gt;\n    terra::resample(mask) |&gt; terra::mask(mask)\n  names(Etp[[i]]) &lt;-Date2[i]\n  print(names(Etp[[i]]))\n  Prc[[i]] &lt;- terra::rast(rain_m_lst[i]) |&gt;\n    terra::resample(mask) |&gt; terra::mask(mask)\n  #print(names(Prc[[i]]))\n}\n\n\n# Recharge calculation\nfor(i in 1:length(Date2)) {\n  PRC &lt;- terra::rast(Prc[i])\n  ETP &lt;- terra::rast(Etp[i])\n  ETP &lt;- ETP*(60*60*24*30)\n  RFF &lt;- terra::rast(Rff[i])\n  Recharge =  PRC - (ETP + RFF)\n  Recharge[Recharge &lt; 0] = 0\n  #print(Recharge)\n  file_rc = glue('temp/Recharge_{Date2[i]}.tif')\n  terra::writeRaster(Recharge, filename = file_rc , overwrite = TRUE)\n  #print('Save!')\n}\ngc()\n\n\n# From month to year\nrec_lst_res = list.files(path = 'temp/', pattern = 'Recharge_.*\\\\.tif$', full.names = TRUE)\n\nrec =  terra::rast(rec_lst_res)\nd &lt;- as.Date(names(rec))\ny &lt;- as.numeric(format(d, \"%Y\"))\nrec_y &lt;- tapp(rec, y, sum)\nnames(rec_y) = Year\n\nfile_rc = glue('02_RESULTADOS/Recharge_year_{Year}.tif')\nterra::writeRaster(rec_y, filename = file_rc , overwrite = TRUE)\nplot(rec_y)\n\n\n\n2.5.11 CLEAN TEMP FILES\n\nunlink(x = list.files('temp', full.names = TRUE))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#curve-number-calculation",
    "href": "potential-recharge.html#curve-number-calculation",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.6 Curve Number Calculation",
    "text": "2.6 Curve Number Calculation\nApplying the presented methodology, it is necessary to combine the Hydrologic Soil Group (HSG) information with Land Use Land Cover (LULC) data to determine the curve number (CN). As of the time of writing this chapter, new approaches are available and can be tested, including the possibility of using soil hydrological information for global purposes. For more information, visit hihydro soil.\nIn the original calculation presented by Santarosa et al. (2024), the textural information from SoilGrids was downloaded and processed to obtain the HSG information for the study area. The following steps will present the conceptualization of this process.\nTo download the SoilGrids information, see the accompanying Google Earth Engine script.\nThis process involves loading the information from SoilGrids and projecting it to the standard projection used.\n\nsoil = terra::rast(my_path('01_DADOS/00_SOIL/SOIL.tif'))\n\nnames(soil) = c('clay', 'sand', 'silt') \nsoil &lt;- soil |&gt; project('EPSG:4326', method = \"mode\")\nplot(soil)\n\n\n\n\n\n\n\n\nFor verification of data, the sum of soil layers should to be equal to 1 for each pixel.\n\nsum(soil) |&gt; plot()\n\n\n\n\n\n\n\n\n\n\n\nRepresentations of actual and estimated points on the zones of the hydrologic soil group and the triangle of soil from Sayl et al. (2017)\n\n\n\n# Hydrologic Soil Group and Label used in the reclassification\n# Hydrologic Soil Group \n#  A  =   1 \n#  B  =   2 \n#  C  =   3 \n#  D  =   4 \n\ncalculate_textural_triangle = function(clay, sand, silt) {\n  case_when(\n\n    clay &lt;= 0.05 & sand &lt;= 0.05 & silt &lt;= 0.05 ~ 0\n    ,clay &gt;= 0.35 ~ 4\n    ,clay &gt;= 0.25 & sand &lt;= 0.45 ~ 4\n    ,clay &gt;= 0.2 & silt &lt;= 0.275 ~ 3\n    ,silt &lt;= 0.5 ~ 2\n    ,clay &lt;= 0.075 ~ 1\n    ,sand &lt;= 0.575 ~ 2\n    ,TRUE ~ 1\n  )\n}\n\nsoil_classified = terra::app(soil, fun = function(x) calculate_textural_triangle(clay = x[, 1], sand = x[,2], silt = x[,3]))\nsoil_classified |&gt; plot()\n\n\n\n\n\n\n\n\n\n2.6.1 Land Use and Land Cover (LULC)\nAnnual land cover data from MapBiomas, with a spatial resolution of 30 meters (Souza et al. 2020), were incorporated to capture the dynamic temporal behavior in runoff estimation. This LULC data can be utilized for annual analysis and is available for multiple countries across South America where MapBiomas information is accessible.\nMapBiomas LULC for Brazil\n\nlist &lt;- list.files(my_path('01_DADOS/01_LULC/'), full.names = TRUE, pattern = '.tif$')\n\nuses &lt;- list()\nfor(i in 1:length(list)) {\n  uses[[i]] &lt;- terra::rast(list[i]) |&gt; \n               terra::resample(soil_classified, method = 'mode') |&gt; \n               terra::as.int()\n  print(uses[[i]])\n}\n\nclass       : SpatRaster \ndimensions  : 668, 628, 1  (nrow, ncol, nlyr)\nresolution  : 0.0025, 0.0025  (x, y)\nextent      : -49.86, -48.29, -22.49, -20.82  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource(s)   : memory\nname        : brasil_coverage_2023 \nmin value   :                    3 \nmax value   :                   48 \n\nmapbio_resample = terra::rast(uses)\nmapbio_resample[mapbio_resample &lt;= 0] = NA\nterra::plot(mapbio_resample[[1]]) \n\n\n\n\n\n\n\n\n\n\n2.6.2 Reclassification of MAPBIOMAS According to SCS Method\nFor simplify the process, the LULC orinal data was reclassified to the SCS LULC classes the MapBimas values are agruped in 8 classes as presented in the Table 2.\nTable 2. Classes of LULC used in SCS and the correspondent classes from MapBiomas\n\n\n\n\n\n\n\nSCS LULC\nMapBiomas LULC\n\n\nUrban (10)\n24\n\n\nAgriculture (20)\n14, 18, 19, 20, 21, 36, 39, 40, 41, 46, 47, 48, 62\n\n\nForest (30)\n1, 3, 4, 5, 49\n\n\nSilviculture (40)\n9\n\n\nGrassland (50)\n12, 13, 32, 50\n\n\nUncover (60)\n23, 25, 29, 30\n\n\nPasture (70)\n15\n\n\nWater (100)\n10, 27, 31, 33\n\n\n\n\n# Multiple replacements\nclass_map_scs &lt;- rbind(c(24,  10), \n                       c(14,  20), c(18, 20), c(19, 20), c(20, 20), c(21, 20), c(36, 20), c(39, 20), c(40, 20), c(41, 20), c(46, 20), c(47, 20), c(48, 20), c(62, 20), \n                       c(1 ,  30), c(3 , 30), c(4 , 30), c(5 , 30), c(49, 30), \n                       c(9 ,  40), \n                       c(12,  50), c(13, 50), c(32, 50), c(50, 50), \n                       c(23,  60), c(25, 60), c(29, 60), c(30, 60),\n                       c(15,  70),\n                       c(11, 100), c(27, 100), c(31, 100), c(33, 100))\n\nrc_map_scs = classify(mapbio_resample, class_map_scs)\nrc_map_scs[rc_map_scs &lt; 10] = NA\n\nterra::plot(rc_map_scs[[1]])\n\n\n\n\n\n\n\n\n\n\n2.6.3 Curve Number (CN) Classification\nBy reclassifying the HSG and LULC (Land Use and Land Cover) data, the CN map can be produced. Table 3 presents the intersection of HSG and LULC data to derive the CN values used in the SCS method.\nTable 3: Curve Number values based on the combination of LULC and HSG data.\n\n\n\nLand Use / Soil Type\nA\nB\nC\nD\n\n\n\n\nUrban\n89\n92\n94\n95\n\n\nCrops\n64\n75\n82\n85\n\n\nForest\n30\n55\n70\n77\n\n\nSilviculture\n45\n66\n77\n86\n\n\nHerbaceous\n48\n62\n71\n85\n\n\nBare Soil\n77\n86\n91\n94\n\n\nPasture\n39\n61\n74\n80\n\n\nNo Data\n0\n0\n0\n0\n\n\n\n\nclass_cn &lt;- rbind(c(11,89), c(12,92), c(13,94), c(14,95), \n                  c(21,64), c(22,75), c(23,82), c(24,85), \n                  c(31,30), c(32,55), c(33,70), c(34,77), \n                  c(41,45), c(42,66), c(43,77), c(44,86), \n                  c(51,48), c(52,62), c(53,71), c(54,85),\n                  c(61,77), c(62,86), c(63,91), c(64,94), \n                  c(71,39), c(72,61), c(73,74), c(74,80), \n                  c(101,0), c(102,0), c(103,0), c(104,0), \n                  c(10,0 ), c(20,0 ), c(30,0 ), c(40,0 ), \n                  c(50,0 ), c(60,0 ), c(70,0 ), c(100,0))\n\n# Reclassify\nsum_soil_uses = soil_classified  + rc_map_scs\nplot(sum_soil_uses)\n\n\n\n\n\n\n\ncn_final = classify(sum_soil_uses, class_cn)\n\n# Nomes = seq(from = 2000, to = 2021) \n# Use year as names for each CN in case of more than one year of analysis\nNomes = 2023 \nnames(cn_final) = Nomes\n\ncn_final[cn_final &lt; 30] = NA\nterra::plot(cn_final[[1]])\n\n\n\n\n\n\n\n# Export Results\nfilename = my_path(\"02_RESULTADOS/CN_{Nomes}.tif\")\ncn_final |&gt; writeRaster(filename = filename, overwrite = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#process-the-hydrological-data",
    "href": "potential-recharge.html#process-the-hydrological-data",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.6 Process the hydrological data",
    "text": "2.6 Process the hydrological data\n\nmask = terra::rast(my_path('02_RESULTADOS/CN_2023.tif')) |&gt; terra::resample(soil) |&gt; terra::trim()\n\n\n# Change the time according with the period\nst &lt;- as.Date('2023/01/01')\nen &lt;- as.Date('2023/12/31')\nDate &lt;- seq(from = st, to = en, by= 'day')\nDate2 &lt;- seq(from = st, to = en, by= 'month')\n\nYear &lt;- seq(from = 2023, to = 2023)\n\n\n2.6.1 STEP 1-A",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#step-2",
    "href": "potential-recharge.html#step-2",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.6 STEP 2",
    "text": "2.6 STEP 2\n\n2.6.1 Resample Curve Number\n\ncn_lst1 = list.files(path = my_path('02_RESULTADOS/'), pattern = 'CN.*\\\\.tif$', full.names = TRUE)\n\ncn1 &lt;- \n  terra::rast(cn_lst1) |&gt; \n  terra::resample(mask) |&gt;\n  terra::mask(mask) |&gt; \n  terra::as.int() |&gt; \n  terra::trim()\n\nfile_cn = my_path('temp/CN_res_{Year}.tif')\nterra::writeRaster(cn1, filename = file_cn , overwrite = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#step-3",
    "href": "potential-recharge.html#step-3",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.7 STEP 3",
    "text": "2.7 STEP 3\n\n2.7.1 Runoff calculation\n\nrain_day_lst_res = list.files(path = 'temp', pattern = 'GPM_day_ret_.*\\\\.tif$', full.names = TRUE)\n\ncn_lst = list.files(path = my_path('temp'), pattern = 'CN_res.*\\\\.tif$', full.names = TRUE)\n\n## arrumar aqui!!\ntable_day_rain &lt;-\n  tibble(Year = Date[seq_along(rain_day_lst_res)], X = rain_day_lst_res)\n\ntable_merge    &lt;- as_tibble(data.frame(Year, cn_lst)) |&gt; merge(table_day_rain, by = 'Year')\n\n#If you need stat again or use another interval can change this object\n#Year &lt;- seq(from = 2017, to = 2021)\n\nfor(i in 1:length(Date)) {\n  cn_lst    &lt;- table_merge$cn_lst\n  cn        &lt;- terra::rast(cn_lst[i])\n  rain_lst  &lt;- table_merge$rain_day_lst_res\n  rainfall  &lt;- terra::rast(rain_lst[i]) |&gt; terra::resample(cn)\n  s = (25400 / cn) - 254\n  ia = 0.2*s\n  runoff    &lt;- ((rainfall - ia)^2)/(rainfall - ia + s)\n  runoff[ia &gt; rainfall] = 0\n  name_rf   &lt;- Date\n  names(runoff[[1]]) &lt;- name_rf[i]\n  file_rf = glue('temp/Runoff_{name_rf[i]}.tif')\n  terra::writeRaster(runoff[[1]], filename = file_rf , overwrite = TRUE)\n  #print(runoff)\n}\n\n\n#Runoff from day to month\nroff_day_lst_res = list.files(path = 'temp/', pattern = 'Runoff.*\\\\.tif$', full.names = TRUE)\n\nroff =  terra::rast(roff_day_lst_res)\nd &lt;- as.Date(names(roff))\nm &lt;- as.numeric(format(d, \"%m\"))\ny &lt;- as.numeric(format(d, \"%Y\"))\nym &lt;- paste0(y, m)\nroff_m &lt;- tapp(roff, ym, sum)\nnames(roff_m) = Date2\n\nfile_rf = glue('temp/Runoff_month_{Date2}.tif')\nterra::writeRaster(roff_m, filename = file_rf , overwrite = TRUE)\n\ngc()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#step-4",
    "href": "potential-recharge.html#step-4",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.8 STEP 4",
    "text": "2.8 STEP 4\n\n2.8.1 Monthly recharge calculation\n\net_m_lst   = list.files(path = '01_DADOS/03_EVAPOTRANSPIRATION/', pattern = '.SUB', full.names = TRUE)\nrain_m_lst = list.files(path = 'temp/', pattern = 'GPM_month.*\\\\.tif$', full.names = TRUE)\nroff_m_lst = list.files(path = 'temp/', pattern = 'Runoff_month_.*\\\\.tif$', full.names = TRUE)\n\nRff &lt;- list()\nEtp &lt;- list()\nPrc &lt;- list()\n\n# Import results and resample all layer\nfor(i in 1:length(Date2)) {\n  Rff[[i]] &lt;- terra::rast(roff_m_lst[i]) |&gt;\n    terra::resample(mask) |&gt; terra::mask(mask)\n  print(names(Rff[[i]]))\n  Etp[[i]] &lt;- terra::rast(et_m_lst[i]) |&gt;\n    terra::resample(mask) |&gt; terra::mask(mask)\n  names(Etp[[i]]) &lt;-Date2[i]\n  print(names(Etp[[i]]))\n  Prc[[i]] &lt;- terra::rast(rain_m_lst[i]) |&gt;\n    terra::resample(mask) |&gt; terra::mask(mask)\n  #print(names(Prc[[i]]))\n}\n\n\n# Recharge calculation\nfor(i in 1:length(Date2)) {\n  PRC &lt;- terra::rast(Prc[i])\n  ETP &lt;- terra::rast(Etp[i])\n  ETP &lt;- ETP*(60*60*24*30)\n  RFF &lt;- terra::rast(Rff[i])\n  Recharge =  PRC - (ETP + RFF)\n  Recharge[Recharge &lt; 0] = 0\n  #print(Recharge)\n  file_rc = glue('temp/Recharge_{Date2[i]}.tif')\n  terra::writeRaster(Recharge, filename = file_rc , overwrite = TRUE)\n  #print('Save!')\n}\ngc()\n\n\n# From month to year\nrec_lst_res = list.files(path = 'temp/', pattern = 'Recharge_.*\\\\.tif$', full.names = TRUE)\n\nrec =  terra::rast(rec_lst_res)\nd &lt;- as.Date(names(rec))\ny &lt;- as.numeric(format(d, \"%Y\"))\nrec_y &lt;- tapp(rec, y, sum)\nnames(rec_y) = Year\n\nfile_rc = glue('02_RESULTADOS/Recharge_year_{Year}.tif')\nterra::writeRaster(rec_y, filename = file_rc , overwrite = TRUE)\nplot(rec_y)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#clean-temp-files",
    "href": "potential-recharge.html#clean-temp-files",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.9 CLEAN TEMP FILES",
    "text": "2.9 CLEAN TEMP FILES\n\nunlink(x = list.files('temp', full.names = TRUE))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#organize-the-daily-data-set",
    "href": "potential-recharge.html#organize-the-daily-data-set",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.7 Organize the daily data set",
    "text": "2.7 Organize the daily data set\n\nrain_day_lst = list.files(path = my_path('01_DADOS/02_PRECIPITATION/'), pattern = '.nc4', full.names = TRUE)\n\nfor(i in 1:length(rain_day_lst)) {\n  rain1 =\n    terra::rast(rain_day_lst[i]) |&gt;\n    terra::project('EPSG:4326') |&gt; \n    terra::t() |&gt;\n    terra::flip(direction = 'horizontal') |&gt;\n    terra::flip(direction = 'vertical') |&gt;\n    terra::resample(mask) |&gt;\n    terra::mask(mask)\n\n  file_rf1 = my_path('temp/Rainfall_GPM_day_ret_{Date[i]}.tif')\n  terra::writeRaster(rain1, filename = file_rf1 , overwrite = TRUE)\n}\n\n\n2.7.1 STEP 1-B",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  },
  {
    "objectID": "potential-recharge.html#convert-daily-rainfall-in-monthly",
    "href": "potential-recharge.html#convert-daily-rainfall-in-monthly",
    "title": "2  POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING",
    "section": "2.6 Convert daily rainfall in monthly",
    "text": "2.6 Convert daily rainfall in monthly\n\nrain_day_lst_res = list.files(path = my_path('temp/'), pattern = 'GPM_day_ret_.*\\\\.tif$', full.names = TRUE)\n\ntable_day_rain &lt;- as_tibble(data.frame(Date, rain_day_lst_res)) |&gt;\n  mutate(Year =  lubridate::year(Date))\n\ntable_date     &lt;- as_tibble(data.frame(Date2))|&gt;\n  mutate(Year =  lubridate::year(Date2))\n\nfor(i in 1:length(Year)) {\n  Y       &lt;- Year[i]\n  sel_rn1 &lt;- table_day_rain |&gt; filter(Year == Y)\n  rain =  terra::rast(sel_rn1$rain_day_lst_res)\n  d &lt;- time(rain)\n  m &lt;- as.numeric(format(d, \"%m\"))\n  y &lt;- as.numeric(format(d, \"%Y\"))\n  ym &lt;- paste0(y, m)\n  rain_m &lt;- tapp(rain, ym, sum)\n  sel_dt &lt;- table_date |&gt; filter(Year == Y)\n  names(rain_m) = sel_dt$Date2\n  file_rf = my_path('temp/Rainfall_GPM_month_{sel_dt$Date2}.tif')\n  terra::writeRaster(rain_m, filename = file_rf , overwrite = TRUE)\n  #print(sel_dt$Date2)\n}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>POTENTIAL AQUIFER RECHARGE THROUGH REMOTE SENSING</span>"
    ]
  }
]